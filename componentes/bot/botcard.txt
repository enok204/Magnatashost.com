import React from "react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Bot, Play, Square, Trash2, Eye, Clock, Cpu, Zap } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import StatusBadge from "./StatusBadge";
import { format } from "date-fns";
import { motion } from "framer-motion";

export default function BotCard({ bot, onStart, onStop, onDelete }) {
  const formatUptime = (seconds) => {
    if (!seconds) return "0m";
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.4 }}
      whileHover={{ scale: 1.02 }}
    >
      <Card className="relative glass hover:border-purple-500/50 transition-all duration-500 overflow-hidden group shadow-2xl">
        {/* Background Glow Effect */}
        <div className="absolute inset-0 bg-gradient-to-br from-purple-600/10 via-transparent to-pink-600/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
        <div className="absolute -top-24 -right-24 w-48 h-48 bg-purple-500/20 rounded-full blur-3xl group-hover:scale-150 transition-transform duration-700" />
        
        {/* Status Indicator Ring */}
        {bot.status === "running" && (
          <div className="absolute top-4 right-4">
            <div className="relative w-3 h-3">
              <div className="absolute inset-0 bg-green-500 rounded-full animate-ping opacity-75"></div>
              <div className="absolute inset-0 bg-green-500 rounded-full"></div>
            </div>
          </div>
        )}
        
        <CardHeader className="relative pb-4 border-b border-white/10">
          <div className="flex items-center gap-4">
            <div className="relative">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-2xl flex items-center justify-center shadow-xl group-hover:shadow-purple-500/50 transition-shadow duration-300">
                <Bot className="w-8 h-8 text-white" />
              </div>
              {bot.status === "running" && (
                <div className="absolute -bottom-1 -right-1 bg-green-500 px-2 py-0.5 rounded-full text-[10px] font-bold text-white border-2 border-[#14142b]">
                  ON
                </div>
              )}
            </div>
            <div className="flex-1">
              <h3 className="text-xl font-black text-white mb-1">{bot.name}</h3>
              <div className="flex items-center gap-2 text-xs text-gray-400">
                <Clock className="w-3 h-3" />
                {format(new Date(bot.created_date), "dd/MM/yyyy")}
              </div>
            </div>
          </div>
          <div className="mt-4">
            <StatusBadge status={bot.status} />
          </div>
        </CardHeader>

        <CardContent className="relative pt-5 space-y-4">
          {/* Stats */}
          {bot.status === "running" && (
            <div className="grid grid-cols-2 gap-3">
              <div className="glass rounded-xl p-3 border border-green-500/30">
                <div className="flex items-center gap-2 mb-1">
                  <Zap className="w-4 h-4 text-green-400" />
                  <span className="text-xs text-gray-400 font-semibold">UPTIME</span>
                </div>
                <p className="text-lg font-black text-green-400">{formatUptime(bot.uptime_seconds)}</p>
              </div>
              <div className="glass rounded-xl p-3 border border-blue-500/30">
                <div className="flex items-center gap-2 mb-1">
                  <Cpu className="w-4 h-4 text-blue-400" />
                  <span className="text-xs text-gray-400 font-semibold">STATUS</span>
                </div>
                <p className="text-lg font-black text-blue-400">ONLINE</p>
              </div>
            </div>
          )}

          {bot.error_message && (
            <div className="glass border border-red-500/30 rounded-xl p-3 bg-red-500/5">
              <p className="text-sm text-red-400 font-medium">{bot.error_message}</p>
            </div>
          )}

          {/* Actions */}
          <div className="space-y-2 pt-2">
            {bot.status === "running" ? (
              <Button
                onClick={() => onStop(bot)}
                size="lg"
                className="w-full bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white font-bold shadow-xl hover:shadow-red-500/50 transition-all duration-300"
                disabled={bot.status === "stopping"}
              >
                <Square className="w-5 h-5 mr-2 fill-current" />
                PARAR BOT
              </Button>
            ) : (
              <Button
                onClick={() => onStart(bot)}
                size="lg"
                className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-purple-700 hover:from-purple-700 hover:via-pink-700 hover:to-purple-800 text-white font-bold shadow-xl glow transition-all duration-300"
                disabled={bot.status === "starting" || bot.status === "stopping"}
              >
                <Play className="w-5 h-5 mr-2 fill-current" />
                INICIAR BOT
              </Button>
            )}
            
            <div className="grid grid-cols-2 gap-2">
              <Link to={createPageUrl(`BotDetails?id=${bot.id}`)} className="block">
                <Button variant="outline" size="sm" className="w-full glass border-white/20 hover:bg-white/10 text-gray-300 font-semibold">
                  <Eye className="w-4 h-4 mr-2" />
                  Detalhes
                </Button>
              </Link>
              <Button
                onClick={() => onDelete(bot)}
                variant="outline"
                size="sm"
                className="glass border-red-500/30 hover:bg-red-500/10 text-red-400 font-semibold"
              >
                <Trash2 className="w-4 h-4 mr-2" />
                Deletar
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}