
import React, { useState, useEffect } from "react";
import { botAPI } from "../api";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Play, Square, Trash2, Download, RefreshCw, Bot, CheckCircle } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";
import StatusBadge from "../components/bots/StatusBadge";
import LogViewer from "../components/bots/LogViewer";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

export default function BotDetails() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const urlParams = new URLSearchParams(window.location.search);
  const botId = urlParams.get("id");

  const { data: bot, isLoading } = useQuery({
    queryKey: ['bot', botId],
    queryFn: async () => {
      return await botAPI.getBot(botId);
    },
    enabled: !!botId,
    refetchInterval: 3000,
  });

  const updateBotMutation = useMutation({
    mutationFn: ({ id, data }) => botAPI.updateBot(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bot', botId] });
    },
  });

  const deleteBotMutation = useMutation({
    mutationFn: (id) => botAPI.deleteBot(id),
    onSuccess: () => {
      navigate(createPageUrl("Dashboard"));
    },
  });

  useEffect(() => {
    if (bot?.status === "running") {
      const interval = setInterval(() => {
        updateBotMutation.mutate({
          id: bot.id,
          data: {
            uptime_seconds: (bot.uptime_seconds || 0) + 3,
          }
        });
      }, 3000);
      return () => clearInterval(interval);
    }
  }, [bot?.status, bot?.id, updateBotMutation]); // Added updateBotMutation to dependencies

  const handleStart = async () => {
    try {
      await botAPI.startBot(bot.id);
    } catch (error) {
      console.error('Erro ao iniciar bot:', error);
    }
  };

  const handleStop = async () => {
    try {
      await botAPI.stopBot(bot.id);
    } catch (error) {
      console.error('Erro ao parar bot:', error);
    }
  };

  const handleDelete = async () => {
    await deleteBotMutation.mutateAsync(bot.id);
  };

  const formatUptime = (seconds) => {
    if (!seconds) return "0h 0m";
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
  };

  if (isLoading || !bot) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-20 h-20 bg-gradient-to-br from-purple-600 to-pink-600 rounded-3xl flex items-center justify-center mx-auto mb-6 animate-float shadow-2xl glow">
            <RefreshCw className="w-10 h-10 text-white animate-spin" />
          </div>
          <p className="text-gray-400 text-lg font-medium">Carregando informações do bot...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6 md:p-12">
      <div className="max-w-7xl mx-auto">
        <Button
          variant="outline"
          onClick={() => navigate(createPageUrl("Dashboard"))}
          className="mb-10 glass border-white/20 hover:bg-white/10 font-semibold"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Voltar ao Dashboard
        </Button>

        <div className="grid lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            <Card className="glass border-white/10 shadow-2xl">
              <CardHeader className="border-b border-white/10">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-2xl flex items-center justify-center shadow-xl glow">
                      <Bot className="w-8 h-8 text-white" />
                    </div>
                    <div>
                      <CardTitle className="text-white text-3xl font-black">{bot.name}</CardTitle>
                      <p className="text-gray-400 mt-1 font-medium">ID: {bot.id.substring(0, 8)}...</p>
                    </div>
                  </div>
                  <StatusBadge status={bot.status} />
                </div>
              </CardHeader>
              
              <CardContent className="pt-8 space-y-6">
                <div className="grid grid-cols-2 gap-6">
                  <div className="glass rounded-xl p-4 border border-white/10">
                    <p className="text-sm text-gray-400 font-semibold mb-2">CRIADO EM</p>
                    <p className="text-white font-bold text-lg">
                      {format(new Date(bot.created_date), "dd/MM/yyyy 'às' HH:mm")}
                    </p>
                  </div>
                  {bot.last_started && (
                    <div className="glass rounded-xl p-4 border border-white/10">
                      <p className="text-sm text-gray-400 font-semibold mb-2">ÚLTIMO INÍCIO</p>
                      <p className="text-white font-bold text-lg">
                        {format(new Date(bot.last_started), "dd/MM/yyyy 'às' HH:mm")}
                      </p>
                    </div>
                  )}
                  {bot.status === "running" && (
                    <div className="glass rounded-xl p-4 border border-green-500/30 bg-green-500/5">
                      <p className="text-sm text-green-400 font-semibold mb-2">TEMPO ATIVO</p>
                      <p className="text-green-400 font-black text-2xl">
                        {formatUptime(bot.uptime_seconds)}
                      </p>
                    </div>
                  )}
                  <div className="glass rounded-xl p-4 border border-white/10">
                    <p className="text-sm text-gray-400 font-semibold mb-2">ARQUIVO</p>
                    <a
                      href={bot.zip_file_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-purple-400 hover:text-purple-300 flex items-center gap-2 font-bold"
                    >
                      <Download className="w-4 h-4" />
                      Baixar ZIP
                    </a>
                  </div>
                </div>

                {bot.error_message && (
                  <div className="glass border border-red-500/40 rounded-xl p-5 bg-red-500/5">
                    <p className="text-red-400 font-bold">{bot.error_message}</p>
                  </div>
                )}

                <div className="flex gap-4 pt-6">
                  {bot.status === "running" ? (
                    <Button
                      onClick={handleStop}
                      className="flex-1 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 font-bold h-14 text-base shadow-xl"
                      disabled={bot.status === "stopping"}
                    >
                      <Square className="w-5 h-5 mr-2 fill-current" />
                      PARAR BOT
                    </Button>
                  ) : (
                    <Button
                      onClick={handleStart}
                      className="flex-1 bg-gradient-to-r from-purple-600 via-pink-600 to-purple-700 hover:from-purple-700 hover:via-pink-700 hover:to-purple-800 font-bold h-14 text-base shadow-xl glow"
                      disabled={bot.status === "starting" || bot.status === "stopping"}
                    >
                      <Play className="w-5 h-5 mr-2 fill-current" />
                      INICIAR BOT
                    </Button>
                  )}
                  
                  <Button
                    onClick={() => setShowDeleteDialog(true)}
                    variant="outline"
                    className="glass border-red-500/40 hover:bg-red-500/10 text-red-400 font-bold h-14"
                  >
                    <Trash2 className="w-5 h-5 mr-2" />
                    Deletar
                  </Button>
                </div>
              </CardContent>
            </Card>

            <LogViewer logs={bot.logs} />
          </div>

          <div className="space-y-6">
            <Card className="glass bg-gradient-to-br from-purple-600/20 via-transparent to-pink-600/20 border-purple-500/30 shadow-2xl">
              <CardHeader>
                <CardTitle className="text-white font-black text-xl">STATUS DO SISTEMA</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between items-center glass rounded-lg p-3 border border-white/10">
                  <span className="text-sm text-gray-300 font-semibold">Processo</span>
                  <span className="font-black text-white">{bot.status === "running" ? "python" : "-"}</span>
                </div>
                <div className="flex justify-between items-center glass rounded-lg p-3 border border-white/10">
                  <span className="text-sm text-gray-300 font-semibold">Memória</span>
                  <span className="font-black text-white">{bot.status === "running" ? "~45 MB" : "-"}</span>
                </div>
                <div className="flex justify-between items-center glass rounded-lg p-3 border border-white/10">
                  <span className="text-sm text-gray-300 font-semibold">Conexão</span>
                  <span className={`font-black ${bot.status === "running" ? "text-green-400" : "text-gray-500"}`}>
                    {bot.status === "running" ? "Conectado" : "Offline"}
                  </span>
                </div>
              </CardContent>
            </Card>

            <Card className="glass border-white/10 shadow-2xl">
              <CardHeader>
                <CardTitle className="text-white font-black text-xl">CONFIGURAÇÃO</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="glass rounded-lg p-4 border border-white/10">
                  <p className="text-sm text-gray-400 mb-2 font-semibold">Token (Oculto)</p>
                  <p className="text-white font-mono text-sm">
                    {bot.token.substring(0, 20)}••••••••
                  </p>
                </div>
                <div className="glass rounded-lg p-4 border border-green-500/30 bg-green-500/5">
                  <p className="text-sm text-gray-400 mb-2 font-semibold">Auto-restart</p>
                  <p className="text-green-400 font-bold flex items-center gap-2">
                    <CheckCircle className="w-4 h-4" />
                    Ativado
                  </p>
                </div>
                <div className="glass rounded-lg p-4 border border-white/10">
                  <p className="text-sm text-gray-400 mb-2 font-semibold">Estrutura ZIP</p>
                  <p className="text-white font-bold">Busca recursiva</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
          <AlertDialogContent className="bg-[#1a1a2e] border-[#2d2d44]">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-white">Deletar bot permanentemente?</AlertDialogTitle>
              <AlertDialogDescription className="text-gray-400">
                Esta ação não pode ser desfeita. Todos os arquivos e logs do bot "{bot.name}" serão removidos permanentemente.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel className="bg-[#2d2d44] border-[#2d2d44] hover:bg-[#3d3d54]">
                Cancelar
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleDelete}
                className="bg-red-500 hover:bg-red-600"
              >
                Sim, Deletar
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
}
